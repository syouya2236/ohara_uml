@startuml Robustness Diagram - Order Flow

' 要素の定義
actor "顧客" as User

boundary "注文画面" as B_Order
boundary "注文確認画面" as B_Confirm
boundary "在庫不足通知" as B_Stock_Error
boundary "支払情報入力画面" as B_Pay_Input
boundary "決済失敗通知/選択画面" as B_Pay_Fail

control "注文処理コントローラ" as C_Main <<Control>>
control "在庫確認コントローラ" as C_Stock <<Control>>
control "支払情報検証コントローラ" as C_Verify <<Control>>
control "決済処理コントローラ" as C_Payment <<Control>>
control "注文確定コントローラ" as C_Finalize <<Control>>

entity "カート" as E_Cart
entity "商品在庫" as E_Stock
entity "支払情報" as E_Payment
entity "注文" as E_Order

'======================================================
' 基本フロー (Primary Flow)
'======================================================

' ①注文開始
User -> B_Order : 注文ボタンをクリック
B_Order -> C_Main : 注文依頼

' ②在庫確認
C_Main -> C_Stock : 在庫確認を依頼
C_Stock ..> E_Stock : 在庫を参照
C_Stock ..> E_Cart : 商品を参照
C_Stock -> C_Main : (在庫OK)

' ③支払情報確認
C_Main -> C_Verify : 支払情報検証を依頼
C_Verify ..> E_Payment : 情報を参照
C_Verify -> C_Main : (情報有効)

' ④決済処理
C_Main -> C_Payment : 決済を依頼
C_Payment -> C_Main : (決済成功)

' ⑤, ⑥注文確定と削除
C_Main -> C_Finalize : 確定を依頼
C_Finalize ..> E_Order : 注文を生成/番号発行
C_Finalize ..> E_Cart : 注文商品を削除

' ⑦完了
C_Finalize -> B_Confirm : 注文確認を表示
B_Confirm -> User : 確認メール送信/画面表示

'======================================================
' 代替フロー (Alternative Flows)
'======================================================

' 代替フローA (在庫不足)
C_Stock -> B_Stock_Error : (在庫不足)
B_Stock_Error -> User : 通知

' 代替フローB (支払情報無効)
C_Verify -> B_Pay_Input : (情報無効)
B_Pay_Input -> User : エラーを通知/再入力を促す
User -> B_Pay_Input : 正しい情報を入力
B_Pay_Input -> C_Verify : (基本フロー③に戻る)

' 代替フローC (決済失敗)
C_Payment -> B_Pay_Fail : (決済失敗)
B_Pay_Fail -> User : 通知/方法を選択
User -> B_Pay_Fail : 支払い方法変更
B_Pay_Fail -> C_Verify : (基本フロー③に戻る)

@enduml