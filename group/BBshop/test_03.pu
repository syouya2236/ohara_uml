@startuml
' スキン設定（見やすくするため）
skinparam style strictuml
skinparam actorStyle awesome
left to right direction

actor 顧客

' 境界（Boundary）クラス
boundary 注文画面
boundary 支払情報入力画面
boundary 注文確認画面
boundary 在庫不足通知画面
boundary 支払エラー画面
boundary 決済失敗画面

' 制御（Control）クラス
control 注文処理コントローラ
control 在庫確認コントローラ
control 支払情報コントローラ
control 決済処理コントローラ

' 実体（Entity）クラス
entity カート
entity 商品在庫
entity 支払情報
entity 注文
entity 注文履歴

' 基本フロー
顧客 --> 注文画面 : 「注文」ボタンをクリック
注文画面 --> 注文処理コントローラ : 注文依頼
注文処理コントローラ --> 在庫確認コントローラ : 在庫確認要求
在庫確認コントローラ --> カート : 商品一覧取得
在庫確認コントローラ --> 商品在庫 : 在庫照会

' 代替フローA（在庫不足）
商品在庫 --> 在庫確認コントローラ : 在庫不足
在庫確認コントローラ --> 在庫不足通知画面 : 通知表示
在庫不足通知画面 --> 顧客 : 「購入不可」通知
' → 購入手続き中止

' 在庫がある場合
商品在庫 --> 在庫確認コントローラ : 在庫あり
在庫確認コントローラ --> 注文処理コントローラ : OK

' 支払情報確認（基本フロー③）
注文処理コントローラ --> 支払情報コントローラ : 支払情報取得
支払情報コントローラ --> 支払情報 : 情報参照

' 代替フローB（支払い情報無効）
支払情報 --> 支払情報コントローラ : 無効
支払情報コントローラ --> 支払エラー画面 : エラー通知
支払エラー画面 --> 顧客 : 支払情報の再入力
顧客 --> 支払情報入力画面 : 正しい情報入力
支払情報入力画面 --> 支払情報コントローラ : 再入力情報送信
支払情報コントローラ --> 支払情報 : 情報更新
' → 基本フロー③に戻る

' 支払情報が有効な場合
支払情報 --> 支払情報コントローラ : 有効
支払情報コントローラ --> 注文処理コントローラ : OK

' 決済処理（基本フロー④）
注文処理コントローラ --> 決済処理コントローラ : 決済実行
決済処理コントローラ --> 支払情報 : 情報使用

' 代替フローC（決済失敗）
決済処理コントローラ --> 決済失敗画面 : 決済エラー通知
決済失敗画面 --> 顧客 : クレジットカード情報の再入力を促す
顧客 --> 支払情報入力画面 : クレジットカード情報再入力
支払情報入力画面 --> 支払情報コントローラ : 再入力情報送信
支払情報コントローラ --> 支払情報 : 更新
' → 基本フロー③に戻る


' 決済成功
決済処理コントローラ --> 注文処理コントローラ : 決済成功

' 注文確定（⑤）
注文処理コントローラ --> 注文 : 注文生成・注文番号発行
注文処理コントローラ --> カート : 商品削除

' 注文確認画面表示（⑦）
注文処理コントローラ --> 注文確認画面 : 確認画面表示
注文確認画面 --> 顧客 : 注文完了通知
注文処理コントローラ --> 注文履歴 : 注文情報保存

@enduml
